name: xyco ci

on:
  pull_request:
    branches:
      - 'main'
      - 'build/*'

jobs:
  rust-tool:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            tools/target/
          key: ${{ runner.os }}-rust-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          default: true
          components: clippy
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --manifest-path tools/Cargo.toml --all-targets -- -D warnings
      - uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path ./tools/Cargo.toml

  cpp-build:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:hirsute
    steps:
      - name: install essential packages
        run: |
          ln -snf /usr/share/zoneinfo/$CONTAINER_TIMEZONE /etc/localtime && echo $CONTAINER_TIMEZONE > /etc/timezone
          apt update && apt install -y build-essential git cmake curl xz-utils
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            tools/target/
          key: ${{ runner.os }}-rust-${{ hashFiles('**/Cargo.lock') }}
      - name: cache llvm toolchain
        id: cache-llvm
        uses: actions/cache@v2
        with:
          path: |
            ~/clang+llvm-13.0.0-x86_64-linux-gnu-ubuntu-20.04
          key: ${{ runner.os }}-llvm-13
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          default: true
      - name: install llvm toolchain
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: |
          curl -SL https://github.com/llvm/llvm-project/releases/download/llvmorg-13.0.0/clang+llvm-13.0.0-x86_64-linux-gnu-ubuntu-20.04.tar.xz | tar -xJC ~
      - name: build
        run: |
          export PATH=~/clang+llvm-13.0.0-x86_64-linux-gnu-ubuntu-20.04/bin:$PATH
          export LD_LIBRARY_PATH=~/clang+llvm-13.0.0-x86_64-linux-gnu-ubuntu-20.04/lib:$LD_LIBRARY_PATH
          cmake -DCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=TRUE -DCMAKE_CXX_COMPILER:FILEPATH=clang++ -S . -B ./build -G "Unix Makefiles"
          cmake --build ./build --config Release --target xyco
          cargo run --manifest-path tools/Cargo.toml -p git-hooks -- check clang-tidy -s src -b build

  cpp-test:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:hirsute
    steps:
      - name: install essential packages
        run: |
          ln -snf /usr/share/zoneinfo/$CONTAINER_TIMEZONE /etc/localtime && echo $CONTAINER_TIMEZONE > /etc/timezone
          apt update && apt install -y build-essential git cmake curl xz-utils
      - uses: actions/checkout@v2
      - name: cache llvm toolchain
        id: cache-llvm
        uses: actions/cache@v2
        with:
          path: |
            ~/clang+llvm-13.0.0-x86_64-linux-gnu-ubuntu-20.04
          key: ${{ runner.os }}-llvm-13
      - name: install llvm toolchain
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: |
          curl -SL https://github.com/llvm/llvm-project/releases/download/llvmorg-13.0.0/clang+llvm-13.0.0-x86_64-linux-gnu-ubuntu-20.04.tar.xz | tar -xJC ~
      - name: test
        run: |
          export PATH=~/clang+llvm-13.0.0-x86_64-linux-gnu-ubuntu-20.04/bin:$PATH
          export LD_LIBRARY_PATH=~/clang+llvm-13.0.0-x86_64-linux-gnu-ubuntu-20.04/lib:$LD_LIBRARY_PATH
          cmake -DCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=TRUE -DCMAKE_CXX_COMPILER:FILEPATH=clang++ -S . -B ./build -G "Unix Makefiles"
          cmake --build ./build --config Release --target xyco_test
          LLVM_PROFILE_FILE="./build/tests/xyco_test.profraw" ./build/tests/xyco_test
          llvm-profdata merge -sparse ./build/tests/xyco_test.profraw -o ./build/tests/xyco_test.profdata
          llvm-cov show ./build/tests/xyco_test -instr-profile=./build/tests/xyco_test.profdata > ./build/tests/coverage.txt
      - name: upload coverage reports
        uses: codecov/codecov-action@v2
        with:
          files: ./build/tests/coverage.txt
          fail_ci_if_error: true
          verbose: true
module;

#include <expected>
#include <filesystem>

export module xyco.fs.uring;

import xyco.logging;
import xyco.fs.common;
import xyco.runtime_ctx;
import xyco.io;

export namespace xyco::fs::uring {
class OpenOptions;

class File : public FileBase<File> {
  friend class OpenOptions;

 public:
  using OpenOptions = OpenOptions;

  [[nodiscard]] auto size() const -> runtime::Future<utils::Result<uintmax_t>>;

  auto status() -> runtime::Future<utils::Result<std::filesystem::file_status>>;

  [[nodiscard]] auto set_permissions(std::filesystem::perms prms,
                                     std::filesystem::perm_options opts =
                                         std::filesystem::perm_options::replace)
      -> runtime::Future<utils::Result<void>>;

  [[nodiscard]] auto modified() const
      -> runtime::Future<utils::Result<timespec>>;

  [[nodiscard]] auto accessed() const
      -> runtime::Future<utils::Result<timespec>>;

  [[nodiscard]] auto created() const
      -> runtime::Future<utils::Result<timespec>>;

  template <typename Iterator>
  auto read(Iterator begin, Iterator end)
      -> runtime::Future<utils::Result<uintptr_t>> {
    using CoOutput = utils::Result<uintptr_t>;

    class Future : public runtime::Future<CoOutput> {
     public:
      auto poll([[maybe_unused]] runtime::Handle<void> self)
          -> runtime::Poll<CoOutput> override {
        auto *extra = dynamic_cast<io::uring::IoExtra *>(event_->extra_.get());

        if (!extra->state_.get_field<io::uring::IoExtra::State::Completed>()) {
          event_->future_ = this;
          extra->args_ = io::uring::IoExtra::Read{
              .buf_ = &*begin_,
              .len_ = static_cast<unsigned int>(std::distance(begin_, end_))};
          runtime::RuntimeCtx::get_ctx()
              ->driver()
              .Register<io::uring::IoRegistry>(event_);
          return runtime::Pending();
        }
        extra->state_.set_field<io::uring::IoExtra::State::Completed, false>();
        if (extra->return_ >= 0) {
          logging::info("read {} bytes from {}", extra->return_, self_->fd_);
          return runtime::Ready<CoOutput>{extra->return_};
        }
        return runtime::Ready<CoOutput>{
            std::unexpected(utils::Error{.errno_ = -extra->return_})};
      }

      Future(Iterator begin, Iterator end, File *self)
          : runtime::Future<CoOutput>(nullptr),
            self_(self),
            event_(std::make_shared<runtime::Event>(runtime::Event{
                .extra_ = std::make_unique<io::uring::IoExtra>()})),
            begin_(begin),
            end_(end) {
        auto *extra = dynamic_cast<io::uring::IoExtra *>(event_->extra_.get());
        extra->fd_ = self_->fd_;
      }

      // NOLINTNEXTLINE(cppcoreguidelines-avoid-reference-coroutine-parameters)
      Future(const Future &future) = delete;

      // NOLINTNEXTLINE(cppcoreguidelines-avoid-reference-coroutine-parameters)
      Future(Future &&future) = delete;

      // NOLINTNEXTLINE(cppcoreguidelines-avoid-reference-coroutine-parameters)
      auto operator=(Future &&future) -> Future & = delete;

      // NOLINTNEXTLINE(cppcoreguidelines-avoid-reference-coroutine-parameters)
      auto operator=(const Future &future) -> Future & = delete;

      ~Future() override = default;

     private:
      File *self_;
      std::shared_ptr<runtime::Event> event_;
      Iterator begin_;
      Iterator end_;
    };

    co_return co_await Future(begin, end, this);
  }

  template <typename Iterator>
  auto write(Iterator begin, Iterator end)
      -> runtime::Future<utils::Result<uintptr_t>> {
    using CoOutput = utils::Result<uintptr_t>;

    class Future : public runtime::Future<CoOutput> {
     public:
      auto poll([[maybe_unused]] runtime::Handle<void> self)
          -> runtime::Poll<CoOutput> override {
        auto *extra = dynamic_cast<io::uring::IoExtra *>(event_->extra_.get());
        if (!extra->state_.get_field<io::uring::IoExtra::State::Completed>()) {
          event_->future_ = this;
          extra->args_ = io::uring::IoExtra::Write{
              .buf_ = &*begin_,
              .len_ = static_cast<unsigned int>(std::distance(begin_, end_))};
          runtime::RuntimeCtx::get_ctx()
              ->driver()
              .Register<io::uring::IoRegistry>(event_);

          return runtime::Pending();
        }
        extra->state_.set_field<io::uring::IoExtra::State::Completed, false>();
        if (extra->return_ >= 0) {
          logging::info("write {} bytes to {}", extra->return_, self_->fd_);
          return runtime::Ready<CoOutput>{extra->return_};
        }
        return runtime::Ready<CoOutput>{
            std::unexpected(utils::Error{.errno_ = -extra->return_})};
      }

      Future(Iterator begin, Iterator end, File *self)
          : runtime::Future<CoOutput>(nullptr),
            self_(self),
            event_(std::make_shared<runtime::Event>(runtime::Event{
                .extra_ = std::make_unique<io::uring::IoExtra>()})),
            begin_(begin),
            end_(end) {
        auto *extra = dynamic_cast<io::uring::IoExtra *>(event_->extra_.get());
        extra->fd_ = self_->fd_;
      }

      // NOLINTNEXTLINE(cppcoreguidelines-avoid-reference-coroutine-parameters)
      Future(const Future &future) = delete;

      // NOLINTNEXTLINE(cppcoreguidelines-avoid-reference-coroutine-parameters)
      Future(Future &&future) = delete;

      // NOLINTNEXTLINE(cppcoreguidelines-avoid-reference-coroutine-parameters)
      auto operator=(Future &&future) -> Future & = delete;

      // NOLINTNEXTLINE(cppcoreguidelines-avoid-reference-coroutine-parameters)
      auto operator=(const Future &future) -> Future & = delete;

      ~Future() override = default;

     private:
      File *self_;
      std::shared_ptr<runtime::Event> event_;
      Iterator begin_;
      Iterator end_;
    };

    co_return co_await Future(begin, end, this);
  }

  [[nodiscard]] auto flush() const -> runtime::Future<utils::Result<void>>;

 private:
  File(int file_descriptor, std::filesystem::path &&path);
};

class OpenOptions : public OpenOptionsBase<OpenOptions> {
 public:
  auto open(std::filesystem::path path) -> runtime::Future<utils::Result<File>>;
};
}  // namespace xyco::fs::uring

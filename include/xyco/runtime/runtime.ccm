module;

#include <coroutine>
#include <expected>
#include <functional>
#include <optional>
#include <vector>

export module xyco.runtime;

export import xyco.future;

import xyco.runtime_core;

export namespace xyco::runtime {
class Runtime {
 public:
  template <typename T>
  auto spawn(Future<T> future) -> void {
    core_.spawn_impl(std::move(future));
  }

  // Blocks the current thread until `future` completes.
  // Note: Current thread is strictly restricted to the thread creating the
  // runtime, and also the thread must not be a worker of another runtime.
  template <typename T>
  auto block_on(Future<T> future) -> T {
    std::optional<T> result;
    // NOLINTNEXTLINE(cppcoreguidelines-avoid-capturing-lambda-coroutines)
    auto blocking_future = [&](RuntimeCore *core, auto future) -> Future<void> {
      result = co_await future;
      core->in_place_worker().suspend();
    };
    core_.spawn_impl(blocking_future(&core_, std::move(future)));

    core_.in_place_worker().run_in_place(&core_);

    // NOLINTNEXTLINE(bugprone-unchecked-optional-access)
    return std::move(*result);
  }

  template <>
  auto block_on(Future<void> future) -> void {
    auto blocking_future = [](RuntimeCore *core, auto future) -> Future<void> {
      co_await future;
      core->in_place_worker().suspend();
    };
    core_.spawn_impl(blocking_future(&core_, std::move(future)));

    core_.in_place_worker().run_in_place(&core_);
  }

  Runtime(std::vector<std::function<void(Driver *)>> &&registry_initializers,
          uint16_t worker_num);

  Runtime(const Runtime &) = delete;

  Runtime(Runtime &&) = delete;

  auto operator=(const Runtime &) -> Runtime & = delete;

  auto operator=(Runtime &&) -> Runtime & = delete;

  ~Runtime() = default;

 private:
  RuntimeCore core_;
};

class Builder {
 public:
  static auto new_multi_thread() -> Builder;

  auto worker_threads(uint16_t val) -> Builder &;

  template <typename Registry, typename... Args>
  auto registry(Args... args) -> Builder & {
    registry_initializers_.push_back(
        [=](Driver *driver) { driver->add_registry<Registry>(args...); });
    return *this;
  }

  [[nodiscard]] auto build()
      -> std::expected<std::unique_ptr<Runtime>, std::nullptr_t>;

 private:
  uint16_t worker_num_{};

  std::vector<std::function<void(Driver *)>> registry_initializers_;
};
}  // namespace xyco::runtime

module;

#include <liburing.h>

#include <format>
#include <variant>
#include <vector>

export module xyco.io.uring;

import xyco.logging;
import xyco.panic;
import xyco.runtime_ctx;
import xyco.overload;
import xyco.io.common;
import xyco.libc;

export namespace xyco::io::uring {
class IoExtra : public runtime::Extra {
 public:
  class Read {
   public:
    void *buf_{};
    unsigned int len_{};
    uint64_t offset_{};
  };
  class Write {
   public:
    const void *buf_{};
    unsigned int len_{};
    uint64_t offset_{};
  };
  class Close {};
  class Accept {
   public:
    sockaddr *addr_;
    socklen_t *addrlen_;
    int flags_{};
  };
  class Connect {
   public:
    const sockaddr *addr_;
    socklen_t addrlen_;
  };
  class Shutdown {
   public:
    io::Shutdown shutdown_;
  };

  class State {
    friend class IoExtra;

   public:
    enum : std::uint8_t { Registered = 0b1, Completed = 0b10 };

    template <size_t F, bool flag = true>
    auto set_field() {
      if constexpr (flag) {
        field_ |= F;
      } else {
        field_ &= ~F;
      }
    }

    template <size_t F>
    [[nodiscard]] auto get_field() -> bool {
      return field_ & F;
    }

   private:
    uint8_t field_;
  };

  [[nodiscard]] auto print() const -> std::string override;

  std::variant<Read, Write, Close, Accept, Connect, Shutdown> args_;
  int fd_{};
  int return_{};
  State state_{};
};

class IoRegistryImpl : public runtime::Registry {
 public:
  constexpr static std::chrono::milliseconds MAX_TIMEOUT = std::chrono::milliseconds(1);
  static const int MAX_EVENTS = 10000;

  [[nodiscard]] auto Register(std::shared_ptr<runtime::Event> event)
      -> utils::Result<void> override;

  [[nodiscard]] auto reregister(std::shared_ptr<runtime::Event> event)
      -> utils::Result<void> override;

  [[nodiscard]] auto deregister(std::shared_ptr<runtime::Event> event)
      -> utils::Result<void> override;

  [[nodiscard]] auto select(runtime::Events &events,
                            std::chrono::milliseconds timeout) -> utils::Result<void> override {
    io_uring_cqe *cqe_ptr = nullptr;
    int return_value = 0;
    __kernel_timespec timespec{};
    timespec.tv_sec = std::chrono::duration_cast<std::chrono::seconds>(timeout).count();
    timespec.tv_nsec =
        std::chrono::duration_cast<std::chrono::nanoseconds>(timeout % std::chrono::seconds(1))
            .count();
    return_value = io_uring_wait_cqe_timeout(&io_uring_, &cqe_ptr, &timespec);
    if (return_value < 0 && (-return_value == ETIME || -return_value == EBUSY)) {
      return {};
    }
    if (return_value < 0) {
      utils::panic();
    }
    if (cqe_ptr != nullptr) {
      unsigned head = 0;
      int count = 0;
      io_uring_for_each_cqe(&io_uring_, head, cqe_ptr) {
        count++;
        // skip deregister result
        if (io_uring_cqe_get_data(cqe_ptr) == nullptr) {
          continue;
        }
        auto *data = static_cast<runtime::Event *>(io_uring_cqe_get_data(cqe_ptr));
        auto *extra = dynamic_cast<uring::IoExtra *>(data->extra_.get());
        logging::trace("res:{},flags:{},user_data:{},fd:{}",
                       cqe_ptr->res,
                       cqe_ptr->flags,
                       static_cast<void *>(data),
                       extra->fd_);

        extra->return_ = cqe_ptr->res;
        auto ready_event =
            std::find_if(registered_events_.begin(),
                         registered_events_.end(),
                         [&](auto &registered_event) { return data == registered_event.get(); });
        events.push_back(*ready_event);
        extra->state_.set_field<io::uring::IoExtra::State::Completed>();
        registered_events_.erase(ready_event);
        extra->state_.set_field<io::uring::IoExtra::State::Registered, false>();
      }
      io_uring_cq_advance(&io_uring_, count);
    }

    return {};
  }

  IoRegistryImpl(uint32_t entries);

  IoRegistryImpl(const IoRegistryImpl &registry) = delete;

  IoRegistryImpl(IoRegistryImpl &&registry) = delete;

  auto operator=(const IoRegistryImpl &registry) -> IoRegistryImpl & = delete;

  auto operator=(IoRegistryImpl &&registry) -> IoRegistryImpl & = delete;

  ~IoRegistryImpl() override;

 private:
  struct io_uring io_uring_;
  std::vector<std::shared_ptr<runtime::Event>> registered_events_;
};

using IoRegistry = runtime::ThreadLocalRegistry<IoRegistryImpl>;
}  // namespace xyco::io::uring

template <>
struct std::formatter<xyco::io::uring::IoExtra> : public std::formatter<std::string> {
  template <typename FormatContext>
  auto format(const xyco::io::uring::IoExtra &extra,
              FormatContext &ctx) const -> decltype(ctx.out()) {
    return std::format_to(
        ctx.out(),
        "IoExtra{{args_={}, fd_={}, return_={}}}",
        std::visit(overloaded{[](auto arg) { return std::format("{}", arg); }}, extra.args_),
        extra.fd_,
        extra.return_);
  }
};

template <>
struct std::formatter<xyco::io::uring::IoExtra::Read> : public std::formatter<std::string> {
  template <typename FormatContext>
  auto format(const xyco::io::uring::IoExtra::Read &args,
              FormatContext &ctx) const -> decltype(ctx.out()) {
    return std::format_to(ctx.out(), "Read{{len_={}, offset_={}}}", args.len_, args.offset_);
  }
};

template <>
struct std::formatter<xyco::io::uring::IoExtra::Write> : public std::formatter<std::string> {
  template <typename FormatContext>
  auto format(const xyco::io::uring::IoExtra::Write &args,
              FormatContext &ctx) const -> decltype(ctx.out()) {
    return std::format_to(ctx.out(), "Write{{len_={}, offset_={}}}", args.len_, args.offset_);
  }
};

template <>
struct std::formatter<xyco::io::uring::IoExtra::Close> : public std::formatter<std::string> {
  template <typename FormatContext>
  auto format([[maybe_unused]] const xyco::io::uring::IoExtra::Close &args,
              FormatContext &ctx) const -> decltype(ctx.out()) {
    return std::format_to(ctx.out(), "Close{{}}");
  }
};

template <>
struct std::formatter<xyco::io::uring::IoExtra::Accept> : public std::formatter<std::string> {
  template <typename FormatContext>
  auto format(const xyco::io::uring::IoExtra::Accept &args,
              FormatContext &ctx) const -> decltype(ctx.out()) {
    // NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)
    auto *addr = reinterpret_cast<xyco::libc::sockaddr_in *>(args.addr_);
    std::string ip_addr(xyco::libc::K_INET_ADDRSTRLEN, 0);
    ip_addr =
        xyco::libc::inet_ntop(addr->sin_family, &addr->sin_addr, ip_addr.data(), ip_addr.size());
    return std::format_to(ctx.out(),
                          "Accept{{addr_={{{}:{}}}, flags_={}}}",
                          ip_addr,
                          addr->sin_port,
                          args.flags_);
  }
};

template <>
struct std::formatter<xyco::io::uring::IoExtra::Connect> : public std::formatter<std::string> {
  template <typename FormatContext>
  auto format(const xyco::io::uring::IoExtra::Connect &args,
              FormatContext &ctx) const -> decltype(ctx.out()) {
    // NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)
    const auto *addr = reinterpret_cast<const xyco::libc::sockaddr_in *>(args.addr_);
    std::string ip_addr(xyco::libc::K_INET_ADDRSTRLEN, 0);
    ip_addr =
        xyco::libc::inet_ntop(addr->sin_family, &addr->sin_addr, ip_addr.data(), ip_addr.size());
    return std::format_to(ctx.out(), "Connect{{addr_={{{}:{}}}}}", ip_addr, addr->sin_port);
  }
};

template <>
struct std::formatter<xyco::io::uring::IoExtra::Shutdown> : public std::formatter<std::string> {
  template <typename FormatContext>
  auto format(const xyco::io::uring::IoExtra::Shutdown &args,
              FormatContext &ctx) const -> decltype(ctx.out()) {
    return std::format_to(ctx.out(), "Shutdown{{shutdown_={}}}", args.shutdown_);
  }
};

module;

#include <format>
#include <mutex>
#include <vector>

export module xyco.io.epoll;

import xyco.runtime_ctx;

export namespace xyco::io::epoll {
class IoExtra : public runtime::Extra {
 public:
  class State {
    friend struct std::formatter<xyco::io::epoll::IoExtra>;

   public:
    enum : std::uint8_t {
      Registered = 0b1,
      Pending = 0b10,
      Readable = 0b100,
      Writable = 0b1000,
      Error = 0b10000
    };

    template <size_t F, bool flag = true>
    auto set_field() {
      if constexpr (flag) {
        field_ |= F;
      } else {
        field_ &= ~F;
      }
    }

    template <size_t F>
    [[nodiscard]] auto get_field() -> bool {
      return field_ & F;
    }

   private:
    uint8_t field_;
  };
  enum class Interest : std::uint8_t { Read, Write, All };

  [[nodiscard]] auto print() const -> std::string override;

  IoExtra(Interest interest, int file_descriptor);

  State state_;
  Interest interest_;
  int fd_;
};

class IoRegistryImpl : public runtime::Registry {
 public:
  [[nodiscard]] auto Register(std::shared_ptr<runtime::Event> event)
      -> utils::Result<void> override;

  [[nodiscard]] auto reregister(std::shared_ptr<runtime::Event> event)
      -> utils::Result<void> override;

  [[nodiscard]] auto deregister(std::shared_ptr<runtime::Event> event)
      -> utils::Result<void> override;

  [[nodiscard]] auto select(runtime::Events &events,
                            std::chrono::milliseconds timeout) -> utils::Result<void> override;

  IoRegistryImpl(int entries);

  IoRegistryImpl(const IoRegistryImpl &epoll) = delete;

  IoRegistryImpl(IoRegistryImpl &&epoll) = delete;

  auto operator=(const IoRegistryImpl &epoll) -> IoRegistryImpl & = delete;

  auto operator=(IoRegistryImpl &&epoll) -> IoRegistryImpl & = delete;

  ~IoRegistryImpl() override;

 private:
  constexpr static std::chrono::milliseconds MAX_TIMEOUT = std::chrono::milliseconds(1);
  constexpr static int MAX_EVENTS = 10000;

  int epfd_;
  std::mutex events_mutex_;
  std::vector<std::shared_ptr<runtime::Event>> registered_events_;

  std::mutex select_mutex_;
};

using IoRegistry = runtime::GlobalRegistry<IoRegistryImpl>;
}  // namespace xyco::io::epoll

template <>
struct std::formatter<xyco::io::epoll::IoExtra> : public std::formatter<std::string> {
  template <typename FormatContext>
  auto format(const xyco::io::epoll::IoExtra &extra,
              FormatContext &ctx) const -> decltype(ctx.out()) {
    std::string state = "[";
    if ((extra.state_.field_ & xyco::io::epoll::IoExtra::State::Registered) != 0) {
      state += "Registered,";
    }
    if ((extra.state_.field_ & xyco::io::epoll::IoExtra::State::Pending) != 0) {
      state += "Pending,";
    }
    if ((extra.state_.field_ & xyco::io::epoll::IoExtra::State::Readable) != 0) {
      state += "Readable,";
    }
    if ((extra.state_.field_ & xyco::io::epoll::IoExtra::State::Writable) != 0) {
      state += "Writable,";
    }
    if ((extra.state_.field_ & xyco::io::epoll::IoExtra::State::Error) != 0) {
      state += "Error,";
    }
    state[state.length() - 1] = ']';

    std::string interest;
    switch (extra.interest_) {
      case xyco::io::epoll::IoExtra::Interest::Read:
        interest = "Read";
        break;
      case xyco::io::epoll::IoExtra::Interest::Write:
        interest = "Write";
        break;
      case xyco::io::epoll::IoExtra::Interest::All:
        interest = "All";
        break;
    }

    return std::format_to(ctx.out(),
                          "IoExtra{{state_={}, interest_={}, fd_={}}}",
                          state,
                          interest,
                          extra.fd_);
  }
};

module;

#include <expected>
#include <format>

export module xyco.error;

export namespace xyco::utils {
class Error;

template <typename T>
using Result = std::expected<T, Error>;

enum class ErrorKind : std::int8_t { Uncategorized = -2, Unsupported };

class Error {
 public:
  static auto from_sys_error() -> Error;

  int errno_{};
  std::string info_;
};

auto into_sys_result(int return_value) -> Result<int>;
}  // namespace xyco::utils

template <>
struct std::formatter<xyco::utils::Error> : public std::formatter<bool> {
  template <typename FormatContext>
  auto format(const xyco::utils::Error& err, FormatContext& ctx) const -> decltype(ctx.out()) {
    if (err.errno_ > 0) {
      return std::format_to(ctx.out(), "IoError{{errno={}, info={}}}", err.errno_, err.info_);
    }
    std::string error_kind;
    switch (err.errno_) {
      case std::to_underlying(xyco::utils::ErrorKind::Uncategorized):
        error_kind = "Uncategorized";
        break;
      case std::to_underlying(xyco::utils::ErrorKind::Unsupported):
        error_kind = "Unsupported";
        break;
      default:
        error_kind = "Unknown";
    }
    return std::format_to(ctx.out(), "IoError{{error_kind={}, info={}}}", error_kind, err.info_);
  }
};

module;

#include <chrono>
#include <memory>
#include <mutex>

export module xyco.time:registry;

import xyco.runtime_ctx;

import :wheel;

export namespace xyco::time {
class TimeExtra : public runtime::Extra {
 public:
  [[nodiscard]] auto print() const -> std::string override;

  TimeExtra(std::chrono::time_point<std::chrono::system_clock> expire_time =
                std::chrono::time_point<std::chrono::system_clock>::min());

  std::chrono::time_point<std::chrono::system_clock> expire_time_;
};

class TimeRegistryImpl : public runtime::Registry {
 public:
  [[nodiscard]] auto Register(std::shared_ptr<runtime::Event> event)
      -> utils::Result<void> override;

  [[nodiscard]] auto reregister(std::shared_ptr<runtime::Event> event)
      -> utils::Result<void> override;

  [[nodiscard]] auto deregister(std::shared_ptr<runtime::Event> event)
      -> utils::Result<void> override;

  [[nodiscard]] auto select(runtime::Events &events,
                            std::chrono::milliseconds timeout) -> utils::Result<void> override;

 private:
  Wheel wheel_;

  std::mutex select_mutex_;
};

using TimeRegistry = runtime::GlobalRegistry<TimeRegistryImpl>;
}  // namespace xyco::time

template <>
struct std::formatter<xyco::time::TimeExtra> : public std::formatter<std::string> {
  template <typename FormatContext>
  auto format(const xyco::time::TimeExtra &extra, FormatContext &ctx) const -> decltype(ctx.out()) {
    return std::format_to(ctx.out(),
                          "TimeExtra{{expire_time_={:%F %T}}}",
                          std::chrono::round<std::chrono::seconds>(extra.expire_time_));
  }
};
